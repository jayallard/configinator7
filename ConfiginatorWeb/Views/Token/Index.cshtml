@model ConfiginatorWeb.Controllers.EditTokenSetView
@using System.Linq;
@using Allard.Json
@using ConfiginatorWeb.Queries
@using Newtonsoft.Json.Linq
@{
    ViewBag.Title = "title";
    Layout = "_Layout";
}
<script src="https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js"></script>
<style>
    pre {
        background-color: white;
        border: 1px solid #dee2e6;
        font-size: larger;
        padding: 15px;
        color: blue;
    }
</style>
<h2>Token Set: @Model.TokenSet.TokenSetName</h2>
@if (Model.TokenSet.Base != null)
{
    <h2>Base: @Model.TokenSet.Base</h2>
}

<table class="table table-bordered">
    <thead>
    <tr>
        <th>Token Name</th>
        <th></th>
        <th>Value</th>
        <th>Parent Values</th>
    </tr>
    </thead>
    @foreach (var t in Model.TokenSet.Tokens.Values.OrderBy(t => t.Name))
    {
        <tr>
            <td>
                @t.Name
            </td>
            <td>
                <a asp-action="EditValue" asp-route-tokenSetName="@Model.TokenSet.TokenSetName" asp-route-key="@t.Name">Edit</a>
                @if (t.TokenValueOrigin != TokenValueOrigin.Inherited)
                {
                    <span>&nbsp;|&nbsp;<a href="#">Delete</a></span>
                }
                <br/>
                @switch (t.TokenValueOrigin)
                {
                    case TokenValueOrigin.Inherited:
                        <div class="badge rounded-pill bg-info">Inherited</div>
                        <br/>
                        break;
                    case TokenValueOrigin.Override:
                        <span class="badge rounded-pill bg-success">Overridden</span>
                        <br/>
                        break;
                    case TokenValueOrigin.Defined:
                        break;
                    default:
                        throw new ArgumentOutOfRangeException();
                }
            </td>
            <td>
                <pre>@t.Token</pre>
            </td>
            <td>
                @if (t.TokenValueOrigin is TokenValueOrigin.Inherited or TokenValueOrigin.Override)
                {
                    // crawl up the parents and make a list
                    // reverse and print the list
                    // this results in the info starting at the top base
                    // class, then down the stack
                    var items = new List<TokenComposedDto>();
                    var current = t.BaseToken;
                    while (current != null)
                    {
                        items.Add(current);
                        current = current.BaseToken;
                    }

                    items.Reverse();
                    foreach (var i in items)
                    {
                        @if (i.Token.Type == JTokenType.Object)
                        {
                            <span>
                                <code>
                                    <pre>@i.Token</pre>
                                </code>
                            </span>
                        }
                        else
                        {
                            <div>
                                @i.TokenSetName : @i.TokenValueOrigin : <code>@i.Token</code>
                            </div>
                        }
                    }
                }
            </td>
        </tr>
    }
</table>
<div class="mermaid">
    @Model.MermaidJsDiagram
</div>
<script>mermaid.initialize({ startOnLoad: true })</script>