@model ConfiginatorWeb.Controllers.EditTokenSetView
@using System.Linq;
@using Allard.Json
@{
    ViewBag.Title = "title";
    Layout = "_Layout";
}

@functions
{
    IEnumerable<TokenComposed> Tokens()
    {
        return Model.Composed.Tokens.Values.OrderBy(t => t.Name);
    // .OrderBy(t => string.Equals(t.SourceTokenSet, Model.Resolved.TokenSetName, StringComparison.OrdinalIgnoreCase) ? 1 : 0)
    // .ThenBy(t => t.SourceTokenSet)
    // .ThenBy(t => t.Name);
    }
}

<style>
    pre {
        background-color: white;
        border: 1px solid #dee2e6;
        font-size: larger;
        padding: 15px;
        color: blue;
    }
</style>
<h2>Token Set: @Model.Composed.TokenSetName</h2>
@if (Model.Composed.Base != null)
{
    <h2>Base: @Model.Composed.Base</h2>
}

<table class="table table-bordered">
    <thead>
    <tr>
        <th>Token Name</th>
        <th></th>
        <th>Value</th>
        <th>Parent Values</th>
    </tr>
    </thead>
    @foreach (var t in Tokens())
    {
        <tr>
            <td>
                @t.Name
            </td>
            <td>
               <a asp-action="EditValue" asp-route-tokenSetName="@Model.Composed.TokenSetName" asp-route-key="@t.Name">Edit</a>
                @if (t.TokenValueOrigin != TokenValueOrigin.Inherited)
                {
                    <span>&nbsp;|&nbsp;<a href="#">Delete</a></span>
                }
                <br/>
                @switch (t.TokenValueOrigin)
                {
                    case TokenValueOrigin.Inherited:
                        <div class="badge rounded-pill bg-info">Inherited</div><br/>
                        break;
                    case TokenValueOrigin.Override:
                        <span class="badge rounded-pill bg-success">Overridden</span><br/>
                        break;
                }            
            </td>
            <td>
                <pre>@t.Token</pre>
            </td>
            <td>
                @if (t.TokenValueOrigin is TokenValueOrigin.Inherited or TokenValueOrigin.Override)
                {
                    // crawl up the parents and make a list
                    // reverse and print the list
                    // this results in the info starting at the top base
                    // class, then down the stack
                    var items = new List<TokenComposed>();
                    var current = t.BaseToken;
                    while (current != null)
                    {
                        items.Add(current);
                        current = current.BaseToken;
                    }

                    items.Reverse();
                    foreach (var i in items)
                    {
                        <span>
                            Token Set: @i.SourceTokenSet<br/>
                            <pre>@i.Token</pre>
                        </span>
                    }
                }
            </td>
        </tr>
    }
</table>