@model ConfiginatorWeb.Controllers.EditVariableSetView
@using System.Linq;
@using Allard.Json
@using ConfiginatorWeb.Queries
@using Newtonsoft.Json.Linq
@{
    ViewBag.Title = "title";
    Layout = "_Layout";
}
<script src="https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js"></script>
<style>
    pre {
        background-color: white;
        border: 1px solid #dee2e6;
        font-size: larger;
        padding: 15px;
        color: blue;
    }
</style>
<h1>Variable Set</h1>
<p>@Model.VariableSet.VariableSetName</p>
<h2>Values</h2>
<table class="table table-bordered">
    <thead>
    <tr>
        <th>Variable Name</th>
        <th></th>
        <th>Value</th>
        <th>Parent Values</th>
    </tr>
    </thead>
    @foreach (var t in Model.VariableSet.Variables.Values.OrderBy(t => t.Name))
    {
        <tr>
            <td>
                @t.Name
            </td>
            <td>
                <a asp-action="EditValue" asp-route-variableSetName="@Model.VariableSet.VariableSetName" asp-route-key="@t.Name">Edit</a>
                @if (t.VariableOrigin != VariableOrigin.Inherited)
                {
                    <span>&nbsp;|&nbsp;<a href="#">Delete</a></span>
                }
                <br/>
                @switch (t.VariableOrigin)
                {
                    case VariableOrigin.Inherited:
                        <div class="badge rounded-pill bg-info">Inherited</div>
                        <br/>
                        break;
                    case VariableOrigin.Override:
                        <span class="badge rounded-pill bg-success">Overridden</span>
                        <br/>
                        break;
                    case VariableOrigin.Defined:
                        break;
                    default:
                        throw new ArgumentOutOfRangeException();
                }
            </td>
            <td>
                <pre>@t.Value</pre>
            </td>
            <td>
                @if (t.VariableOrigin is VariableOrigin.Inherited or VariableOrigin.Override)
                {
                    // crawl up the parents and make a list
                    // reverse and print the list
                    // this results in the info starting at the top base
                    // class, then down the stack
                    var items = new List<VariableComposedDto> {t};
                    var current = t.BaseToken;
                    while (current != null)
                    {
                        items.Add(current);
                        current = current.BaseToken;
                    }

                    items.Reverse();
                    for (var i = 0; i < items.Count; i++)
                    {
                        var item = items[i];
                        @if (item.Value.Type == JTokenType.Object)
                        {
                            <span>
                                <code>
                                    <pre>@item.Value</pre>
                                </code>
                            </span>
                        }
                        else
                        {
                            <div>
                                @item.VariableSetName : @item.VariableOrigin : <code>@item.Value</code>
                                
                                @* TODO: ToString() is insufficient here... works for simple values but wont' work for objects. *@
                                @if (i > 0 && item.VariableOrigin == VariableOrigin.Override && item.Value.ToString() == items[i - 1].Value.ToString())
                                {
                                    <b><i>Can Delete</i></b>
                                }
                            </div>
                        }
                    }
                }
            </td>
        </tr>
    }
</table>
<h2>Releases</h2>
<p>
    TODO
</p>
<ul>
    <li>/a/b/c</li>
</ul>
<h2>Variable Set Relationships</h2>
<div class="mermaid">
    @Model.MermaidJsDiagram
</div>
<script>mermaid.initialize({ startOnLoad: true })</script>