@using Allard.Json
@model ConfiginatorWeb.Controllers.ReleaseDisplayView

@{
    ViewBag.Title = "title";
    Layout = "_Layout";
}

<p>Section: <a asp-controller="Section" asp-action="Display" asp-route-name="@Model.Section.SectionName">@Model.Section.SectionName</a></p>
<p>Environment: @Model.Environment.EnvironmentName</p>
<p>Release Id: @Model.Release.ReleaseId</p>

<h2>Resolved Value</h2>
<p>This is the Model Value combined with the variables. This is the configuration value of the section for this release.</p>
<code>
    <pre>@Model.Release.ResolvedValue.PrettyPrint()</pre>
</code>

<h2>Template Value</h2>
<p>The configuration value template. This is updated with variable values, resulting in the Resolved Value.</p>
<code>
    <pre>@Model.Release.ModelValue.PrettyPrint()</pre>
</code>


<h2>Variable Set</h2>
@if (Model.Release.VariableSet != null)
{
    <p>Name: @Model.Release.VariableSet.VariableSetName</p>
    <p>Base: @(Model.Release.VariableSet.Base ?? "none")</p>
    <table class="table">
        <thead>
        <tr>
            <th>Name</th>
            <th>Source</th>
            <th></th>
            <th>Value</th>
        </tr>
        </thead>
        @foreach (var t in Model.Release.VariableSet.Variables.Values.OrderBy(v => v.Name))
        {
            <tr>
                @* <td style="@(Model.SelectedRelease.UsedVariables.Contains(t.Name) ? "font-weight: bold; background-color: lightblue;" : "")">@t.Name</td> *@
                <td>@t.Name</td>
                <td>@t.SourceVariableSetName</td>
                <td>@t.VariableOrigin</td>
                <td>
                    <pre>@t.Value</pre>
                </td>
            </tr>
        }
    </table>
}

@await Component.InvokeAsync("Schema", Model.Release.Schema)

@await Component.InvokeAsync("DeploymentHistory",
    new {Model.Section, Model.Environment, Model.Release})