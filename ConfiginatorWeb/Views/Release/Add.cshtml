@model ConfiginatorWeb.Models.Release.EditReleaseView

@{
    ViewBag.Title = "Create Configuration Release";
    Layout = "_Layout";
}

<script type="text/javascript" src="~/lib/jquery/dist/jquery.min.js">
</script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" integrity="sha512-9usAa10IRO0HhonpyAIVpjrylPvoDwiPUiKdWk5t3PyolY1cOd4DSE0Ga+ri4AuTroPR5aQvXU9xC6qOPnzFeg==" crossorigin="anonymous" referrerpolicy="no-referrer"/>
<script type="text/javascript">
function selectedSchemaName() {
    return $('#ddSchema option:selected').text();
}

function selectedSchemaId() {
    return $('#ddSchema option:selected').val();
}

function selectedVariableSetName() {
    return $('#variableSet option:selected').text();
}

function selectedVariableSetId() {
    return $('#variableSet option:selected').val();
}

function preview() {
    $("#schemaErrors ul").empty()
    if (selectedSchemaName() === '') {
        $('#preview').text('Choose a schema');
        return;
    }
    
    const value = $('#value').val().trim();
    const request = {
        value: value,
        sectionId: @Model.SectionId,
        environmentId: @Model.EnvironmentId,
        schemaId: selectedSchemaId(),
        variableSetId: selectedVariableSetId()
    };
    
    const url = '@Url.ActionLink("Preview")';
    $('#preview').text(url);
    
    //alert(value);
    
    $.post(url,  request)
    .done(function(data) {
        $('#preview').text(data.json);
        if (data.errors.length > 0) {
            //alert('schema errors');
            $.each(data.errors, function (index, item){
                $("#schemaErrors ul").append("<li>" + item + '</li>');
            });
        }
    });
}

function loadVariableSet() {
    //alert(selectedVariableSetName());
    const tbody = $('#vsRows');
    tbody.empty()
    
    const vs = selectedVariableSetName();
    if (vs === '') {
        $('#vs').hide();
        return;
    }
    
    $('#vsHeading').text('Variable Set: ' + vs);
    const url = '@Url.ActionLink("GetVariableSet", "VariableSet")?variableSetName=' + encodeURIComponent(vs);
    $.get(url)
    .done(function (data){
        $('#vs').show();
        $.each(data.result.values, function (r, item) {
            // todo: do this programatically.. first attempts failed
            tbody.append("<tr><td>" + item.name + '</td><td>' + item.value + '</td></tr>');
         });
    });
    // .error(function(e) {
    //     alert(e);
    //  });
}
    

$(document).ready(function() {
    $('#btnGenerateSample').click(function (e) {
        $.get('@Url.ActionLink("GetSchemaSample", "Release")?schemaName=' + selectedSchemaName())
        .done(function(data) {
            $('#value').val(data);
        });
    });
    
    $('#viewVariableSet').click(function () {
        if (selectedVariableSetName() === '') {
            return;
        }
        window.open('@Url.ActionLink("Index", "VariableSet")?variableSetName=' + selectedVariableSetName());
    });
    
    $('#viewSchema').click(function () {
        if (selectedSchemaName() === '') {
            return;
        }
        window.open('@Url.ActionLink("SchemaView", "Schema")?schemaName=' + selectedSchemaName());
    });
        
    $('#variableSet').change(function(e) {
        loadVariableSet();
    });
    
    $('#refreshPreview').click(function (e) {
        preview();
     });
    
    $('#save').click(function (e){
        const requestDto = {
                                     SectionName: '@Model.SectionName',
                                     EnvironmentName: '@Model.EnvironmentName',
                                     SchemaName: selectedSchemaName(),
                                     Value: $('#value').val(),
                                     VariableSetName: selectedVariableSetName()
                                 };
        //alert(JSON.stringify(requestDto));
        $.post('/Release/Create', requestDto)
        .done(function(data) {
            if (data.success) {
                document.location.replace('@Url.ActionLink("Display", "Section", new {Model.SectionId})')
                return;
            }
            
            alert(JSON.stringify(data));
        });
    });
    
    loadVariableSet();
});
</script>

<h1>Create Release</h1>
<h3>Configuration Section</h3>
<p>
    Namespace: @Model.EnvironmentName<br/>
    Section: @Model.SectionName<br/>
    Environment: @Model.EnvironmentName
</p>

<form method="post">
    @Html.AntiForgeryToken()
    <div class="container">
        <div class="row">
            <div class="col-2">
                Schema
            </div>
            <div class="col-3">
                <select id="ddSchema">
                    <option></option>
                    @foreach (var s in Model.Schemas)
                    {
                        @if (string.Equals(Model.DefaultSchemaName, s.SchemaName.FullName, StringComparison.OrdinalIgnoreCase))
                        {
                            <option selected="selected" value="@s.SchemaId">@s.SchemaName.FullName</option>
                        }
                        else
                        {
                            <option value="@s.SchemaId">@s.SchemaName.FullName</option>
                        }
                    }
                </select><a class="fa fa-external-link" id="viewSchema"></a> <button type="button" class="btn btn-link" id="btnGenerateSample">Generate Sample</button>

            </div>
        </div>
        <div class="row">
            <div class="col-2">
                Variable Set
            </div>
            <div class="col-3">
                <select id="variableSet">
                    <!-- I couldn't get Html.DropDownListFor to work for this -->
                    <option></option>
                    @foreach (var ts in Model.VariableSet)
                    {
                        @if (string.Equals(Model.DefaultVariableSetName, ts.VariableSetName, StringComparison.OrdinalIgnoreCase))
                        {
                            <option selected="selected" value="@ts.VariableSetId">@ts.VariableSetName</option>
                        }
                        else
                        {
                            <option value="@ts.VariableSetId">@ts.VariableSetName</option>
                        }
                    }
                </select>
            </div>
        </div>
    </div>
    <br/>
    <table style="width: 100%;">
        <thead>
        <tr>
            <th>Value</th>
            <th style="padding-left: 25px">Preview</th>
        </tr>
        </thead>
        <tr>
            <td style="vertical-align: top; width: 50%;">
                <textarea style="width:100%; height: 200px" id="value">@Model.DefaultValue</textarea>
            </td>
            <td style="vertical-align: top; width: 50%; padding-left: 25px">
                <pre id="preview"></pre>
            </td>
        </tr>
        <tr>
            <td></td>
            <td style="padding-left:25px">
                <span class="fa fa-refresh" style="cursor: pointer" aria-hidden="true" id="refreshPreview">&nbsp;</span>
                <div id="schemaErrors" class="text-danger">
                    <ul></ul>
                </div>
            </td>
        </tr>
    </table>

    @if (Model.DefaultValue != null)
    {
        <div>The values have been copied from the latest release.</div>
    }
    <button type="button" class="btn btn-primary" id="save">Create Release</button>
    <button type="reset" class="btn btn-secondary">Reset</button>
</form>
<br/>
<div class="container" id="vs">
    <h2 id="vsHeading">Variable Set</h2>
    <table class="table table-bordered">
        <thead>
        <tr>
            <th>Name</th>
            <th>Value</th>
        </tr>
        </thead>
        <tbody id="vsRows">
        <tr><td>a</td><td>b</td><td>c</td></tr>
        </tbody>
    </table>
    <a class="btn btn-link" id="viewVariableSet">Edit</a>
</div>